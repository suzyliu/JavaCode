/*Runtime Complexity: liner O(n+m).
       
Runtime Complexity: O(n⋅log m). Since m ≫ n and m ≫ log m, O(n⋅log m) should be asymptotically better than O(n+m).

The "Find The Duplicates" Problem

Given two arrays of US social security numbers: Arr1 and Arr2 of lengths n and m respectively, how can you most efficiently compute an array of all persons included on both arrays?

Solve and analyze the complexity for 2 cases:
1. m ≈ n - lengths are approximately the same
2. m ≫ n - one is much longer than the other
*/


a=max(m,n)
   O(a)
   
   * 
m = [11, 12, 21, .........22,INT_MAX ] O(m)
n = [11, 23, INT_MAX] 
               *
return duplicates [11]

class Pramp {
   public static void main(String[] args) {
      String pramp = "Practice Makes Perfect";
      System.out.println(pramp);
   }
}

 int[] findDuplicates(int[] Arr1, int[] Arr2){
    
    int index1=0;
    int index2=0;
    ArrayList<Integer> list = new ArrayList<Integer>();
    while(index1 <Arr1.length && index2 <Arr2.length){
       if(Arr1[index1]>Arr2[index2]){
          index2++;
       }else if (Arr1[index1] <Arr2[index2]){
          index1++;
       }else{ //same value.
          list.add(Arr1[index1]);
          index1++;
          index2++;
       }
       
    }
    return list.toArray();
 }
// max(O(n),log(m))

  for(int i=0;i<Arr1.length;i++){
     int num=Arr1[i];
     if(binarySearch(Arr2,num)){
        list.add(num);
     }
  }

   boolean binarySearch(array, numberToSearch)   //log(m)
      
 function findDuplicates1(Arr1, Arr2):   duplicates = []
   i = 0
   j = 0
   while i < length(Arr1) and j < length(Arr2):
      if Arr1[i] == Arr2[j]:
         duplicated.append(Arr1[i])
         i = i + 1
         j = j + 1
      else if Arr1[i] < Arr2[j]:
         i = i + 1
      else:
         j = j + 1
   return duplicates
      
 
 function findDuplicates2(Arr1, Arr2):
   duplicates = []
   for number in Arr1:
      if binarySearch(Arr2, number) != -1:
         duplicates.append(number);
   return duplicates

function binarySearch(arr, num):
    begin = 0
    end = length(arr)
    while (begin <= end):
       mid = round((begin+end)/2)
       if arr[mid] < num:
          begin = mid + 1
       else if arr[mid] == num:
          return mid
       else:
          end = mid - 1
    return -1
 